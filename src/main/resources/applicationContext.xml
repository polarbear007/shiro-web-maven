<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 配置dataSource -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>
		<property name="jdbcUrl" value="jdbc:mysql:///ssm_shiro?serverTimezone=Asia/Shanghai&amp;useSSL=false"/>
		<property name="user" value="root"/>
		<property name="password" value="root" />
	</bean>
	
	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 虽然大部分配置都已经转到spring 配置文件，但是最好还是保留mybatis配置文件，然后引入一下 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 配置dao层接口扫描: 方式1  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.itcast.mapper"></property>
	</bean>
	
	<!-- 配置一下spring bean注解支持 -->
	<context:annotation-config /> 
	<context:component-scan base-package="cn.itcast.*" >
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<!-- 配置一下事务注解支持 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 配置一下aop 注解支持 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	
	<!-- 配置和securityManager， 这是shiro 框架的核心 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 配置缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"></property>
		<!-- 配置单个realm -->
		<property name="realm" ref="myShiroRealm"/>
		<!-- 配置session 管理器-->
		<property name="sessionManager" ref="sessionManager"></property> 
		<!-- 配置rememberMeManager -->
		<property name="rememberMeManager" ref="rememberMeManager"></property>
	</bean>
	
	<!-- 其实我们不配置也默认具有rememberMe 功能，但是可能在使用的过程中会报异常 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- 默认 cookie 的键值就是 rememberMe -->
		<property name="cookie" ref="rememberMeCookie"></property>
		<!-- 必须配置这个，不然很容易报异常。 
			 如果我们没有配置加密的算法，默认是会使用 AesCipherService ，即 aes 加密算法 
			 这种加密算法是对称加密，也就是加密和解密使用同一套秘钥。下面就是指定这个秘钥是什么。
			 aes 加密对秘钥是有一定的要求的，有特定的方法去生成符合要求的秘钥。我们不用去深究。
			 这里是直接百度一个可以使用的秘钥，真实的开发肯定不能用这个，因为秘钥都一样的话，cookie 上保存的密文也就成明文了。
			 有需要的时候，我们可以去学一下怎么生成 aes 秘钥。
		-->
		<property name="cipherKey" 
					value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/> 
	</bean>
	
	<!-- 设置一下 rememberMe cookie  -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- 默认就是这个名 -->
		<property name="name" value="rememberMeCookie"/>
		<property name="httpOnly" value="true"/>
		<!-- 以秒为单位，这里设置为 30 天 -->
		<property name="maxAge" value="2592000"/>
	</bean>
	
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 配置sessionDao， 这个对象可以对 session 对象进行增删改查，可以把session 对象保存到缓存中 -->
		<property name="sessionDAO" ref="sessionDAO"></property>
		<!-- shiro 框架允许把session 对象保存到缓存中， 其实只要我们配置 cacheManager 的时候名字叫 cacheManager -->
		<property name="cacheManager" ref="cacheManager"/>
		<!-- 设置sessionId 对应的 cookie 对象 -->
		<property name="sessionIdCookie" ref="sessionIdCookie"></property>		
		
		<!-- 设置session 默认的过期时间,默认是 30分钟过期，单位是  -->
		<property name="globalSessionTimeout" value="1800000"></property>
		<!-- 设置是否定期校验 session 过期，默认是true 。使用默认值 -->
		<property name="sessionValidationSchedulerEnabled" value="true"></property>
		<!-- 设置多久定期检查 session 是否过期，默认是一小时, 单位是毫秒 。 使用默认值-->
		<property name="sessionValidationInterval" value="3600000"></property>
		
		<!-- 校验定时器，其实我们也可以不指定，默认会使用  ExecutorServiceSessionValidationScheduler  
		<property name="sessionValidationScheduler" ></property>-->
	</bean>
	
	<!-- 配置 sessionIdCookie 对象,主要可以设置 sessionId cookie 的键值，还可以配置 cookie 的生命周期 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- 配置sessionId 在cookie 上面的键值， 默认是 SESSIONID  -->
		<property name="name" value="shiroSessionId"/>
		<!-- 支持 httpOnly,设置了HttpOnly=true,在脚本中就不能的到cookie，可以避免cookie被盗用  -->
		<property name="httpOnly" value="true" />
		<!-- 默认是-1，浏览器一关，这个cookie 就失效了。 但是这并不是很合理，因为这个 cookie 一丢失，session 对象就找不到了
			 所以我们把这个cookie 的生命周期设置成跟 session 一样。 注意： cookie 的单位是秒， session 是毫秒。
		 -->
		<property name="maxAge" value="1800"></property>
	</bean>
	
	<!-- 配置一个 sessionDao 对象 -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<!-- 配置 session 对象在缓存中对应的名字，这里使用的其实就是默认值，只是为了演示怎么配置 -->
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache"></property>
		<!-- 生成sessionId的生成器，生成的值会作为session 对象的唯一标识
			 也会保存一份到 cookie 上去， 当再次请求的时候，请求通过 cookie 再带回 sessionId
			 我们可以通过这个 sessionId 找到内存中或者缓存中的 session 对象-->
		<property name="sessionIdGenerator" ref="sessionIdGenerator"></property>
	</bean>
	
	<!-- 配置一个sessionIdGenerator 对象 
		这个 SessionIdGenerator 接口就两个实现类：JavaUuidSessionIdGenerator 和  RandomSessionIdGenerator
		默认是 JavaUuidSessionIdGenerator -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"></bean>
	
	<!-- 配置ehcacheManager 与 shiro 整合 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- 配置一下 ehcache.xml 的位置 -->
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
	</bean>
	
	<!-- 配置realm -->
	<bean id="myShiroRealm" class="cn.itcast.realm.MyShiroRealm">
		<property name="credentialsMatcher" >
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!-- 加密的算法  -->
				<property name="hashAlgorithmName" value="MD5"></property>
				<!-- 加密的次数 -->
				<property name="hashIterations" value="3"></property>
			</bean>
		</property>
	</bean>
	
	
	<!-- 配置 lifecycleBeanPostProcessor , 可以拦截spring中bean 的 init() 和  destroy() 方法
		 间接实现了spring中的 BeanPostProcessor 接口
	 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- 启用 shiro 注解。  【注意】必须先配置 lifecycleBeanPostProcessor， 否则无效 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
														depends-on="lifecycleBeanPostProcessor" >
			<property name="proxyTargetClass" value="true"></property>
	</bean>
			
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>
	
	
	<!-- 配置 shiroFilter
		【注意】 这个id 必须和web.xml 时面的那个 shiroFielter 的<fielter-name> 一致才可以
		      	因为web.xml 里面配置的那个过滤器对象是要由  spring IOC容器来创建的，如果名字不一致会获取不到
	 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<!-- 登陆页面，需要校验的所有请求都会重定向到此页面 -->
		<property name="loginUrl" value="/login.jsp" />
		<!-- 登陆成功的页面 -->
		<property name="successUrl" value="/success.jsp" />
		<!-- 没有权限的页面， -->
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		
		<!-- 配置哪些页面的访问需要什么权限
			1、 anon	 是匿名访问
			2、 authc 	是认证访问
			3、 如果不配置默认匿名访问
			4、 也可以使用通配符进行匹配，但是使用了通配符的话， 很多没有明确配置的路径也会受影响
							/*      匹配webapp 目录下（不包括子目录 ）的所有文件
							/**     webapp 目录下（包括所有子目录）的所有文件
			5、 优先匹配原则： /login.jsp 可以匹配  login.jsp 页面
			              /*         也可以匹配 login.jsp 页面
			              	如果两个都能匹配的话，那么就看谁排在前面，就按谁的规则来
		 -->
		<property name="filterChainDefinitions">
			<value>
				/login.jsp = anon
				/user/login = anon
				/index.jsp = anon
				/error.jsp = anon
				/unauthorized.jsp = anon
				/testShiroTag.jsp = anon
				/success.jsp = authc
				/user/updateOrders = authc,roles[admin]
				/* = authc
			</value>
		</property>
	</bean>
</beans>
